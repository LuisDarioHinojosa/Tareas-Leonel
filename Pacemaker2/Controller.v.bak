module Controller(
	input clk,
	input rst,
    input sa,
    input za,
    input sv,
    input zv,
    output pa,
    output ta,
    output pv,
    output tv
);

parameter ResetTimerA = 3'b000;
parameter WaitA = 3'b000;
parameter PaceA = 3'b000;
parameter ResetTimerV = 3'b000;
parameter WaitV = 3'b000;
parameter PaceV = 3'b000;

reg [2:0] STATE, NEXT;


always @(posedge clk)
	begin
		if(rst) STATE <= ResetTimerA;
		else STATE <= NEXT;
	end


always@(*)
	begin
		case(STATE)
			//WAIT : NEXT = (s == 0 & z == 0) ? WAIT :  (s == 0 & z == 1) ? PACE : RT;
            ResetTimerA : NEXT <= WaitA;
            WaitA : NEXT <= (~sa | ~za) ? WaitA : (~sa | za) ? PaceA : ResetTimerV;
            PaceA : NEXT <= ResetTimerV;
            ResetTimerV : NEXT <= WaitV;
            WaitV : NEXT <= (~sv | ~zv) ? WaitV : (~sv | zv) ? PaceV : ResetTimerA;
            PaceV : NEXT <= ResetTimerV;
			default : NEXT <= ResetTimerA;
		endcase
	end


assign pa = (STATE == PaceA);
assign ta = (STATE == ResetTimerA);
assign pv = (STATE == PaceV);
assign tv = (STATE == ResetTimerV);





endmodule
